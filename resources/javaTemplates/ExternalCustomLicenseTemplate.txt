/**
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2024 Source Auditor Inc.
 */
package org.spdx.library.model.v3;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import javax.annotation.Nullable;

import org.spdx.core.IModelCopyManager;
import org.spdx.core.IndividualUriValue;
import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.library.model.v3.core.CreationInfo;
import org.spdx.library.model.v3.core.ExternalIdentifier;
import org.spdx.library.model.v3.core.ExternalRef;
import org.spdx.library.model.v3.core.NamespaceMap;
import org.spdx.library.model.v3.core.SpdxDocument;
import org.spdx.library.model.v3.expandedlicensing.CustomLicense;
import org.spdx.storage.IModelStore;

/**
 * This class represents an SPDX custom license  which is not present in the model store
 * 
 * The external property provides optional information on where the external element may be located and verified
 * 
 * @author Gary O'Neall
 *
 */
public class ExternalCustomLicense extends CustomLicense  implements IndividualUriValue {

	@Nullable SpdxDocument enclosingSpdxDocument = null;

	/**
	 * @param store store to use for the inflated object
	 * @param copyManager if non-null, implicitly copy any referenced properties from other model stores
	 * @param objectUri URI or anonymous ID for the Element
	 * @param external Information about the external map
	 * @param create if true, create the object
	 * @param idPrefix - prefix to be used when generating new SPDX IDs
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExternalCustomLicense(IModelStore store, String objectUri, IModelCopyManager copyManager, 
			boolean create, String idPrefix) throws InvalidSPDXAnalysisException {
		super(store, objectUri, copyManager, create, idPrefix);
	}
	
	/**
	 * @param store store to use for the inflated object
	 * @param copyManager if non-null, implicitly copy any referenced properties from other model stores
	 * @param objectUri URI or anonymous ID for the Element
	 * @param external Information about the external map
	 * @throws InvalidSPDXAnalysisException 
	 */
	public ExternalCustomLicense(IModelStore store, String objectUri, IModelCopyManager copyManager) throws InvalidSPDXAnalysisException {
		this(store, objectUri, copyManager, true, null);
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.IndividualUriValue#getIndividualURI()
	 */
	@Override
	public String getIndividualURI() {
		return getObjectUri();
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#getType()
	 */
	@Override
	public String getType() {
		return "ExpandedLicensing.ExternalCustomLicense";
	}
	
	// Getters and Setters

	/**
	 * @return the creationInfo
	 */
	 @Override
	public CreationInfo getCreationInfo() throws InvalidSPDXAnalysisException {
		 throw new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store.");
	}
	
	@Override
	public Collection<ExternalRef> getExternalRefs() {
		throw new RuntimeException(new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store."));
	}
	@Override
	public Collection<ExternalIdentifier> getExternalIdentifiers() {
		throw new RuntimeException(new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store."));
	}
	

		/**
	 * @return the description
	 */
	public Optional<String> getDescription() throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store.");
	}
	/**
	 * @param description the description to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	@Override
	public ExternalCustomLicense setDescription(@Nullable String description) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store.");
	}

	/**
	 * @return the summary
	 */
	@Override
	public Optional<String> getSummary() throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store.");
	}
	/**
	 * @param summary the summary to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	@Override
	public ExternalCustomLicense setSummary(@Nullable String summary) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store.");
	}
	
	
	/**
	 * @return the enclosingSpdxDocument
	 */
	public SpdxDocument getEnclosingSpdxDocument() {
		return enclosingSpdxDocument;
	}

	/**
	 * @param enclosingSpdxDocument the enclosingSpdxDocument to set
	 */
	public void setEnclosingSpdxDocument(SpdxDocument enclosingSpdxDocument) {
		this.enclosingSpdxDocument = enclosingSpdxDocument;
	}

	@Override
	public String toString() {
		if (Objects.nonNull(enclosingSpdxDocument)) {
			try {
				String nameSpace = null;
				String prefix = null;
				for (NamespaceMap ns:enclosingSpdxDocument.getNamespaceMaps()) {
					if (this.getObjectUri().startsWith(ns.getNamespace())) {
						if (Objects.isNull(nameSpace) || ns.getNamespace().length() > nameSpace.length()) {
							nameSpace = ns.getNamespace();
							prefix = ns.getPrefix();
						}
					}
				}
				if (Objects.nonNull(nameSpace)) {
					return prefix + getObjectUri().substring(nameSpace.length());
				} else {
					return getObjectUri();
				}
			} catch (InvalidSPDXAnalysisException ex) {
				return getObjectUri();
			}
		} else {
			return getObjectUri();
		}
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.ModelObject#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersion, List<IndividualUriValue> profiles) {
		return new ArrayList<>();
	}
	
	/**
	* @param LicenseText the LicenseText to set
	* @return this to chain setters
	* @throws InvalidSPDXAnalysisException 
	*/
	@Override
	public CustomLicense setLicenseText(@Nullable String LicenseText) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException(getObjectUri() + " is external to this object store.");
	}
	
	/**
	 *@return null since this is external
	 */
	@Override
	public @Nullable String getLicenseText() throws InvalidSPDXAnalysisException {
		return null;
	}
}
