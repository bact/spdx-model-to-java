/**
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2024 Source Auditor Inc.
 */
package org.spdx.library.model.{{versionSuffix}};

{{#imports}}
{{.}}
{{/imports}}

/**
 * @author Gary O'Neall
 * 
 * GENERATED FROM THE TEMPLATE FILE - DO NOT MODIFY
 * 
 * The class will provide constant or generated test values for the unit tests
 *
 */
public class TestValuesGenerator {

	public static Map<String, Class<?>> MOCK_TYPE_TO_CLASS = new HashMap<>();
	
	static {
		{{#classesForBuilders}}
		{{#abstract}}
		MOCK_TYPE_TO_CLASS.put("Mock{{{className}}}", Mock{{{className}}}.class);
		{{/abstract}}
		{{/classesForBuilders}}
	}
	
	{{#classesForBuilders}}
	{{#abstract}}
	static class Mock{{{className}}} extends {{{className}}} {

		/**
		 * @param builder superclass builder
		 * @throws InvalidSPDXAnalysisException on error
		 */
		protected Mock{{{className}}}({{{className}}}Builder builder)
				throws InvalidSPDXAnalysisException {
			super(builder);
		}
		
		/**
		 * @param modelStore Model store where the AIAIPackage is to be stored
		 * @param objectUri URI or anonymous ID for the AIAIPackage
		 * @param copyManager Copy manager for the AIAIPackage - can be null if copying is not required
		 * @param create true if AIAIPackage is to be created
		 * @param idPrefix - prefix to be used when generating new SPDX IDs
		 * @throws InvalidSPDXAnalysisException when unable to create the AIAIPackage
		 */
		 @SuppressWarnings("unchecked")
		public Mock{{{className}}}(IModelStore modelStore, String objectUri, IModelCopyManager copyManager,
				boolean create, String idPrefix) throws InvalidSPDXAnalysisException {
			super(modelStore, objectUri, copyManager, create, idPrefix);
		}
		
		/* (non-Javadoc)
		 * @see org.spdx.library.core.CoreModelObject#getType()
		 */
		@Override
		public String getType() {
			return "Mock{{{className}}}";
		}		
		
		static class Mock{{{className}}}Builder extends {{{className}}}Builder {

			/**
			 * @param modelStore store for the built object
			 * @param objectUri uri for the built object
			 * @param copyManager optional copyManager
			 */
			public Mock{{{className}}}Builder(IModelStore modelStore,
					String objectUri, IModelCopyManager copyManager) {
				super(modelStore, objectUri, copyManager);
			}

			@Override
			public {{{className}}} build() throws InvalidSPDXAnalysisException {
				return new Mock{{{className}}}(this);
			}
			
			{{#objectPropertyValueCollection}}	
			/**
			 * Adds a {{{propertyName}}} to the initial collection
			 * @param {{{propertyName}}} {{{propertyName}}} to add
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{adder}}}({{{type}}} {{{propertyName}}}) {
				if (Objects.nonNull({{{propertyName}}})) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
				}
				return this;
			}
			
			/**
			 * Adds all elements from a collection to the initial {{{propertyName}}} collection
			 * @param {{{propertyName}}}Collection collection to initialize the {{{propertyName}}}
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{addAller}}}(Collection<{{{type}}}> {{{propertyName}}}Collection) {
				if (Objects.nonNull({{{propertyName}}}Collection)) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Collection);
				}
				return this;
			}
			{{/objectPropertyValueCollection}}
			{{#enumPropertyValueCollection}}
			
			/**
			 * Adds a {{{propertyName}}} to the initial collection
			 * @param {{{propertyName}}} {{{propertyName}}} to add
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{adder}}}({{{type}}} {{{propertyName}}}) {
				if (Objects.nonNull({{{propertyName}}})) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
				}
				return this;
			}
			
			/**
			 * Adds all elements from a collection to the initial {{{propertyName}}} collection
			 * @param {{{propertyName}}}Collection collection to initialize the {{{propertyName}}}
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{addAller}}}(Collection<{{{type}}}> {{{propertyName}}}Collection) {
				if (Objects.nonNull({{{propertyName}}}Collection)) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Collection);
				}
				return this;
			}
			{{/enumPropertyValueCollection}}
			{{#stringCollection}}
			
			/**
			 * Adds a {{{propertyName}}} to the initial collection
			 * @param {{{propertyName}}} {{{propertyName}}} to add
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{adder}}}(String {{{propertyName}}}) {
				if (Objects.nonNull({{{propertyName}}})) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
				}
				return this;
			}
			
			/**
			 * Adds all elements from a collection to the initial {{{propertyName}}} collection
			 * @param {{{propertyName}}}Collection collection to initialize the {{{propertyName}}}
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{addAller}}}(Collection<String> {{{propertyName}}}Collection) {
				if (Objects.nonNull({{{propertyName}}}Collection)) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Collection);
				}
				return this;
			}
			{{/stringCollection}}
			{{#objectPropertyValueSet}}
			
			/**
			 * Adds a {{{propertyName}}} to the initial collection
			 * @param {{{propertyName}}} {{{propertyName}}} to add
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{adder}}}({{{type}}} {{{propertyName}}}) {
				if (Objects.nonNull({{{propertyName}}})) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
				}
				return this;
			}
			
			/**
			 * Adds all elements from a collection to the initial {{{propertyName}}} collection
			 * @param {{{propertyName}}}Collection collection to initialize the {{{propertyName}}}
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{addAller}}}(Set<{{{type}}}> {{{propertyName}}}Set) {
				if (Objects.nonNull({{{propertyName}}}Set)) {
					{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Set);
				}
				return this;
			}
			{{/objectPropertyValueSet}}
			{{#elementProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/elementProperties}}
			{{#objectProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/objectProperties}}
			{{#anyLicenseInfoProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/anyLicenseInfoProperties}}
			{{#licenseAdditionProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/licenseAdditionProperties}}
			{{#extendableLicenseProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/extendableLicenseProperties}}
			{{#enumerationProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/enumerationProperties}}
			{{#booleanProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/booleanProperties}}
			{{#integerProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/integerProperties}}
			{{#doubleProperties}}

			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/doubleProperties}}
			{{#stringProperties}}
			
			/**
			 * Sets the initial value of {{{propertyName}}}
			 * @param {{{propertyName}}} value to set
			 * @return this for chaining
			**/
			public Mock{{{className}}}Builder {{{setter}}}(String {{{propertyName}}}) {
				{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
				return this;
			}
			{{/stringProperties}}
		}
	}
	{{/abstract}}
	{{/classesForBuilders}}

	{{#integerProperties}}
	public static final Integer {{{propertyNameUpper}}}_TEST_VALUE = 55;
	{{/integerProperties}}
	{{#doubleProperties}}
	public static final Double {{{propertyNameUpper}}}_TEST_VALUE = 55.1;
	{{/doubleProperties}}
	{{#stringProperties}}
	{{^pattern}}
	public static final String {{{propertyNameUpper}}}_TEST_VALUE = "test {{{propertyName}}}";
	{{/pattern}}
	{{#pattern}}
	public static final String {{{propertyNameUpper}}}_TEST_VALUE = UnitTestHelper.genRandPattern("{{{pattern}}}");
	{{/pattern}}
	{{/stringProperties}}
	{{#enumerationProperties}}
	public static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE1 = {{{type}}}.values()[0];
	public static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE2 = {{{type}}}.values()[1];
	{{/enumerationProperties}}
	{{#stringCollection}}
	{{^pattern}}
	public static final String {{{propertyNameUpper}}}_TEST_VALUE1 = "test 1 {{{propertyName}}}";
	public static final String {{{propertyNameUpper}}}_TEST_VALUE2 = "test 2 {{{propertyName}}}";
	public static final String {{{propertyNameUpper}}}_TEST_VALUE3 = "test 3 {{{propertyName}}}";
	{{/pattern}}
	{{#pattern}}
	public static final String {{{propertyNameUpper}}}_TEST_VALUE1 = UnitTestHelper.genRandPattern("{{{pattern}}}");
	public static final String {{{propertyNameUpper}}}_TEST_VALUE2 = UnitTestHelper.genRandPattern("{{{pattern}}}");
	public static final String {{{propertyNameUpper}}}_TEST_VALUE3 = UnitTestHelper.genRandPattern("{{{pattern}}}");
	{{/pattern}}
	public static final List<String> {{{propertyNameUpper}}}_TEST_LIST1 = Arrays.asList(new String[] { {{{propertyNameUpper}}}_TEST_VALUE1, {{{propertyNameUpper}}}_TEST_VALUE2 });
	public static final List<String> {{{propertyNameUpper}}}_TEST_LIST2 = Arrays.asList(new String[] { {{{propertyNameUpper}}}_TEST_VALUE3 });
	{{/stringCollection}}
	{{#enumPropertyValueCollection}}
	public static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE1 = {{{type}}}.values()[0];
	public static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE2 = {{{type}}}.values()[1];
	public static final List<{{{type}}}> {{{propertyNameUpper}}}_TEST_LIST1 = Arrays.asList(new {{{type}}}[] { {{{propertyNameUpper}}}_TEST_VALUE1, {{{propertyNameUpper}}}_TEST_VALUE2 });
	public static final List<{{{type}}}> {{{propertyNameUpper}}}_TEST_LIST2 = Arrays.asList(new {{{type}}}[] { {{{propertyNameUpper}}}_TEST_VALUE1 });
	{{/enumPropertyValueCollection}}
	
	private IModelStore modelStore;
	private IModelCopyManager copyManager;
	CreationInfo creationInfo;
	
	public TestValuesGenerator(IModelStore modelStore, IModelCopyManager copyManager) throws InvalidSPDXAnalysisException {
		this.modelStore = modelStore;
		this.copyManager = copyManager;
		if (!ModelRegistry.getModelRegistry().containsSpecVersion("{{{versionSemVer}}}")) {
			ModelRegistry.getModelRegistry().registerModel(new TestSpdxModelInfo());
		}
		creationInfo = new CreationInfo.CreationInfoBuilder(modelStore, modelStore.getNextId(IdType.Anonymous), copyManager)
							.setCreated("2010-01-29T18:30:22Z")
							.setSpecVersion("{{{versionSemVer}}}")
							.build();
		AgentBuilder agentBuilder = new AgentBuilder(modelStore, "https://unique/id" + modelStore.getNextId(IdType.SpdxId), copyManager);
		agentBuilder.setCreationInfo(creationInfo);
		agentBuilder.setName("Creator Name");
		creationInfo.getCreatedBys().add(agentBuilder.build());
	}
	
	{{#classesForBuilders}}
	public {{{className}}}Builder builderFor{{{className}}}Tests(String objectUri) throws InvalidSPDXAnalysisException {
		{{#abstract}}
		{{{className}}}Builder retval = new Mock{{{className}}}.Mock{{{className}}}Builder(modelStore, objectUri, copyManager)
		{{/abstract}}
		{{^abstract}}
		{{{className}}}Builder retval = new {{{className}}}Builder(modelStore, objectUri, copyManager)
		{{/abstract}}
				{{#booleanProperties}}
				.{{{setter}}}(true)
				{{/booleanProperties}}
				{{#integerProperties}}
				.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE)
				{{/integerProperties}}
				{{#doubleProperties}}
				.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE)
				{{/doubleProperties}}
				{{#stringProperties}}
				.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE)
				{{/stringProperties}}
				{{#stringCollection}}
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE1)
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE2)
				{{/stringCollection}}
				{{#enumerationProperties}}
				.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE1)
				{{/enumerationProperties}}
				{{#enumPropertyValueCollection}}
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE1)
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE2)
				{{/enumPropertyValueCollection}}
				{{#elementProperties}}
				.{{{setter}}}(builderFor{{{type}}}Tests(modelStore.getNextId(IdType.SpdxId)).build())
				{{/elementProperties}}
				{{#objectProperties}}
				{{^isCreationInfo}}
				.{{{setter}}}(builderFor{{{type}}}Tests(modelStore.getNextId(IdType.SpdxId)).build())
				{{/isCreationInfo}}
				{{/objectProperties}}
				{{#anyLicenseInfoProperties}}
				.{{{setter}}}(builderFor{{{type}}}Tests(modelStore.getNextId(IdType.SpdxId)).build())
				{{/anyLicenseInfoProperties}}
				{{#licenseAdditionProperties}}
				.{{{setter}}}(builderFor{{{type}}}Tests(modelStore.getNextId(IdType.SpdxId)).build())
				{{/licenseAdditionProperties}}
				{{#extendableLicenseProperties}}
				.{{{setter}}}(builderFor{{{type}}}Tests(modelStore.getNextId(IdType.SpdxId)).build())
				{{/extendableLicenseProperties}}
				{{#objectPropertyValueCollection}}
				.{{{adder}}}(builderFor{{{type}}}Tests(modelStore.getNextId(IdType.SpdxId)).build())
				{{/objectPropertyValueCollection}}
				{{#objectPropertyValueSet}}
				.{{{adder}}}(builderFor{{{type}}}Tests(modelStore.getNextId(IdType.SpdxId)).build())
				{{/objectPropertyValueSet}}
				;
		{{#hasCreationInfo}}
		retval.setCreationInfo(creationInfo);
		{{/hasCreationInfo}}
		return retval;
	}
	
	{{/classesForBuilders}}
}
