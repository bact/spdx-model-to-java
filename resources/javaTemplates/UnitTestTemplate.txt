/**
 * Copyright (c) {{{year}}} Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package {{{pkgName}}};

{{#imports}}
{{.}}
{{/imports}}

/**
 * GENERATED FILE - DO NOT MODIFY
**/

public class {{{className}}}Test extends TestCase {

	static final String TEST_OBJECT_URI = "https://test.uri/testuri";
	
	TestValuesGenerator generator;
	
	protected void setUp() throws Exception {
		super.setUp();
		generator = new TestValuesGenerator(new MockModelStore(), new MockCopyManager());
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#verify()}.
	 * @throws InvalidSPDXAnalysisException on errors
	 */
	public void testVerify() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		List<String> result = test{{{className}}}.verify();
		assertTrue(result.isEmpty());
		// TODO - add negative tests
	}

	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#getType()}.
	 */
	public void testGetType() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		assertEquals("{{{classProfile}}}.{{{className}}}", test{{{className}}}.getType());
	}

	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#Element({{{pkgName}}}.{{{className}}}.{{{className}}}Builder)}.
	 */
	public void test{{{className}}}{{{className}}}Builder() throws InvalidSPDXAnalysisException {
		generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
	}
	
	public void testEquivalent() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{{className}}} test2{{{className}}} = generator.builderFor{{{className}}}Tests("https://testObject2").build();
		assertTrue(test{{{className}}}.equivalent(test2{{{className}}}));
		assertTrue(test2{{{className}}}.equivalent(test{{{className}}}));
		// TODO change some parameters for negative tests
	}
	{{#elementProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		//TODO: Implement
	}
	{{/elementProperties}}
	{{#objectProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		//TODO: Implement
	}
	{{/objectProperties}}
	{{#anyLicenseInfoProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		//TODO: Implement
	}
	{{/anyLicenseInfoProperties}}
	{{#licenseAdditionProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		//TODO: Implement
	}
	{{/licenseAdditionProperties}}
	{{#extendableLicenseProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		//TODO: Implement
	}
	{{/extendableLicenseProperties}}
	{{#enumerationProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
		assertEquals(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE1, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE1), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE2);
		{{#nonOptional}}
		assertEquals(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE2, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE2), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/enumerationProperties}}
	{{#booleanProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
		assertEquals(new Boolean(true), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(new Boolean(true)), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}(false);
		{{#nonOptional}}
		assertEquals(new Boolean(false), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(new Boolean(false)), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/booleanProperties}}
	{{#integerProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
		assertEquals(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}(new Integer(653));
		{{#nonOptional}}
		assertEquals(new Integer(653), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(new Integer(653)), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/integerProperties}}
	{{#doubleProperties}}

	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
		assertEquals(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}(new Double(653.6));
		{{#nonOptional}}
		assertEquals(new Double(653.6), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(new Double(653.6)), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/doubleProperties}}
	{{#stringProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		{{#nonOptional}}
		assertEquals(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^pattern}}
		String newStringValue = "new {{{propertyName}}} value";
		{{/pattern}}
		{{#pattern}}
		String newStringValue = UnitTestHelper.genRandPattern("{{{pattern}}}");
		{{/pattern}}
		test{{{className}}}.{{{setter}}}(newStringValue);
		{{#nonOptional}}
		assertEquals(newStringValue, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(newStringValue), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/stringProperties}}
	{{#objectPropertyValueCollection}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
//		test{{{className}}}.{{{getter}}}s().clear();
//		test{{{className}}}.{{{getter}}}s().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
		//TODO: Implement
	}
	{{/objectPropertyValueCollection}}
	{{#stringCollection}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}s}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_LIST1, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
		test{{{className}}}.{{{getter}}}s().clear();
		test{{{className}}}.{{{getter}}}s().addAll(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_LIST2);
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_LIST2, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
	}
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}s}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
//		test{{{className}}}.{{{getter}}}s().clear();
//		test{{{className}}}.{{{getter}}}s().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}())));
		//TODO: Implement
	}
	{{/objectPropertyValueSet}}
	{{#enumPropertyValueCollection}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = generator.builderFor{{{className}}}Tests(TEST_OBJECT_URI).build();
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_LIST1, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
		test{{{className}}}.{{{getter}}}s().clear();
		test{{{className}}}.{{{getter}}}s().addAll(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_LIST2);
		assertTrue(UnitTestHelper.isListsEqual(TestValuesGenerator.{{{propertyNameUpper}}}_TEST_LIST2, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
	}
	{{/enumPropertyValueCollection}}
	{{#elementProperties}}
	{{/elementProperties}}
	{{#objectProperties}}
	{{/objectProperties}}
	{{#anyLicenseInfoProperties}}
	{{/anyLicenseInfoProperties}}
	{{#licenseAdditionProperties}}
	{{/licenseAdditionProperties}}
	{{#extendableLicenseProperties}}
	{{/extendableLicenseProperties}}
	{{#enumerationProperties}}
	{{/enumerationProperties}}
	{{#booleanProperties}}
	{{/booleanProperties}}
	{{#integerProperties}}
	{{/integerProperties}}
	{{#doubleProperties}}
	{{/doubleProperties}}
	{{#stringProperties}}
	{{/stringProperties}}
	{{#objectPropertyValueCollection}}
	{{/objectPropertyValueCollection}}
	{{#stringCollection}}
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	{{/objectPropertyValueSet}}
	{{#enumPropertyValueCollection}}
	{{/enumPropertyValueCollection}}
}