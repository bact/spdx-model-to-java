/**
 * Copyright (c) {{{year}}} Source Auditor Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
 
package {{{pkgName}}};

import javax.annotation.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.core.IModelCopyManager;
import {{{pkgName}}}.{{{className}}}.{{{className}}}Builder;
import org.spdx.library.model.v3.core.CreationInfo;
import org.spdx.storage.IModelStore;
import org.spdx.storage.simple.InMemSpdxStore;
import org.spdx.utility.compare.UnitTestHelper;

import junit.framework.TestCase;

public class {{{className}}}Test extends TestCase {

	static final String TEST_OBJECT_URI = "https://test.uri/testuri";
	

	IModelStore modelStore;
	IModelCopyManager copyManager;
	CreationInfo creationInfo;

	{{#integerProperties}}
	static final Integer {{{propertyNameUpper}}}_TEST_VALUE = 55;
	{{/integerProperties}}
	{{#stringProperties}}
	static final String {{{propertyNameUpper}}}_TEST_VALUE = "test {{{propertyName}}}";
	{{/stringProperties}}
	{{#enumerationProperties}}
	static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE1 = {{{type}}}.values()[0];
	static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE2 = {{{type}}}.values()[1];
	{{/enumerationProperties}}
	{{#stringCollection}}
	static final String {{{propertyNameUpper}}}_TEST_VALUE1 = "test 1 {{{propertyName}}}";
	static final String {{{propertyNameUpper}}}_TEST_VALUE2 = "test 2 {{{propertyName}}}";
	static final String {{{propertyNameUpper}}}_TEST_VALUE3 = "test 3 {{{propertyName}}}";
	static final List<String> {{{propertyNameUpper}}}_TEST_LIST1 = Arrays.asList(new String[] { {{{propertyNameUpper}}}_TEST_VALUE1, {{{propertyNameUpper}}}_TEST_VALUE2 });
	static final List<String> {{{propertyNameUpper}}}_TEST_LIST2 = Arrays.asList(new String[] { {{{propertyNameUpper}}}_TEST_VALUE3 });
	{{/stringCollection}}
	{{#enumPropertyValueCollection}}
	static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE1 = {{{type}}}.values()[0];
	static final {{{type}}} {{{propertyNameUpper}}}_TEST_VALUE2 = {{{type}}}.values()[1];
	static final List<{{{type}}}> {{{propertyNameUpper}}}_TEST_LIST1 = Arrays.asList(new {{{type}}}[] { {{{propertyNameUpper}}}_TEST_VALUE1, {{{propertyNameUpper}}}_TEST_VALUE2 });
	static final List<{{{type}}}> {{{propertyNameUpper}}}_TEST_LIST2 = Arrays.asList(new {{{type}}}[] { {{{propertyNameUpper}}}_TEST_VALUE1 });
	{{/enumPropertyValueCollection}}
	
	protected void setUp() throws Exception {
		super.setUp();
		modelStore = new InMemSpdxStore();
		copyManager = new ModelCopyManager();
		creationInfo = new CreationInfoBuilder(modelStore, modelStore.getNextId(IdType.Anonymous), copyManager)
							.setCreated("2010-01-29T18:30:22Z")
							.setSpecVersion("SPDX-3.0")
							.addProfile(ProfileIdentifierType.SOFTWARE)
							.addProfile(ProfileIdentifierType.CORE).build();
		AgentBuilder agentBuilder = new AgentBuilder(modelStore, "https://unique/id" + modelStore.getNextId(IdType.SpdxId), copyManager);
		agentBuilder.setCreationInfo(creationInfo);
		agentBuilder.setName("Creator Name");
		creationInfo.getCreatedBys().add(agentBuilder.build());
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	
	public {{{className}}}Builder builderFor{{{className}}}Tests(
					IModelStore modelStore, String objectUri, @Nullable ModelCopyManager copyManager) throws InvalidSPDXAnalysisException {
		{{{className}}}Builder retval = new {{{className}}}Builder(modelStore, objectUri, copyManager)
				{{#booleanProperties}}
				.{{{setter}}}(true)
				{{/booleanProperties}}
				{{#integerProperties}}
				.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE)
				{{/integerProperties}}
				{{#stringProperties}}
				.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE)
				{{/stringProperties}}
				{{#stringCollection}}
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE1)
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE2)
				{{/stringCollection}}
				{{#enumerationProperties}}
				.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE1)
				{{/enumerationProperties}}
				{{#enumPropertyValueCollection}}
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE1)
				.{{{adder}}}({{{propertyNameUpper}}}_TEST_VALUE2)
				{{/enumPropertyValueCollection}}
				//TODO: Add in test values
				/********************
				{{#elementProperties}}
				.{{{setter}}}(Element testElement)
				{{/elementProperties}}
				{{#objectProperties}}
				.{{{setter}}}(new {{{type}}}())
				{{/objectProperties}}
				{{#anyLicenseInfoProperties}}
				.{{{setter}}}(TEST_ANYLICENSE_INFO)
				{{/anyLicenseInfoProperties}}
				{{#objectPropertyValueCollection}}
				.{{{adder}}}({{{type}}})
				{{/objectPropertyValueCollection}}
				{{#objectPropertyValueSet}}
				.{{{adder}}}({{{type}}})
				{{/objectPropertyValueSet}}
				***************/
				;
		retval.setCreationInfo(creationInfo);
		return retval;
	}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#verify()}.
	 * @throws InvalidSPDXAnalysisException on errors
	 */
	public void testVerify() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		List<String> result = test{{{className}}}.verify();
		assertTrue(result.isEmpty());
		// TODO - add negative tests
	}

	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#getType()}.
	 */
	public void testGetType() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		assertEquals("{{{classProfile}}}.{{{className}}}", test{{{className}}}.getType());
	}

	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#toString()}.
	 */
	public void testToString() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{^usePropertiesForToString}}
		assertEquals("{{{className}}}: "+TEST_OBJECT_URI, test{{{className}}}.toString());
		{{/usePropertiesForToString}}
		{{#usePropertiesForToString}}
		fail("Not yet implemented");
		{{/usePropertiesForToString}}
	}

	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#Element({{{pkgName}}}.{{{className}}}.{{{className}}}Builder)}.
	 */
	public void test{{{className}}}{{{className}}}Builder() throws InvalidSPDXAnalysisException {
		builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
	}
	
	public void testEquivalent() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{{className}}} test2{{{className}}} = builderFor{{{className}}}Tests(new InMemSpdxStore(), "https://testObject2", copyManager).build();
		assertTrue(test{{{className}}}.equivalent(test2{{{className}}}));
		assertTrue(test2{{{className}}}.equivalent(test{{{className}}}));
		// TODO change some parameters for negative tests
	}
	{{#elementProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		fail("Not yet implemented");
	}
	{{/elementProperties}}
	{{#objectProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		fail("Not yet implemented");
	}
	{{/objectProperties}}
	{{#anyLicenseInfoProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{#nonOptional}}
//		assertEquals(TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
//		test{{{className}}}.{{{setter}}}(NEW_TEST_VALUE);
		{{#nonOptional}}
//		assertEquals(NEW_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
//		assertEquals(Optional.of(NEW_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		fail("Not yet implemented");
	}
	{{/anyLicenseInfoProperties}}
	{{#enumerationProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{#nonOptional}}
		assertEquals({{{propertyNameUpper}}}_TEST_VALUE1, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of({{{propertyNameUpper}}}_TEST_VALUE1), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}({{{propertyNameUpper}}}_TEST_VALUE2);
		{{#nonOptional}}
		assertEquals({{{propertyNameUpper}}}_TEST_VALUE2, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of({{{propertyNameUpper}}}_TEST_VALUE2), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/enumerationProperties}}
	{{#booleanProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{#nonOptional}}
		assertEquals(new Boolean(true), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(new Boolean(true)), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}(false);
		{{#nonOptional}}
		assertEquals(new Boolean(false), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(new Boolean(false)), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/booleanProperties}}
	{{#integerProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{#nonOptional}}
		assertEquals({{{propertyNameUpper}}}_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of({{{propertyNameUpper}}}_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}(new Integer(653));
		{{#nonOptional}}
		assertEquals(new Integer(653), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of(new Integer(653)), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/integerProperties}}
	{{#stringProperties}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{setter}}}}.
	 */
	public void test{{{className}}}{{{setter}}}() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		{{#nonOptional}}
		assertEquals({{{propertyNameUpper}}}_TEST_VALUE, test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of({{{propertyNameUpper}}}_TEST_VALUE), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		test{{{className}}}.{{{setter}}}("new {{{propertyName}}} value");
		{{#nonOptional}}
		assertEquals("new {{{propertyName}}} value", test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
		{{^nonOptional}}
		assertEquals(Optional.of("new {{{propertyName}}} value"), test{{{className}}}.{{{getter}}}());
		{{/nonOptional}}
	}
	{{/stringProperties}}
	{{#objectPropertyValueCollection}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
//		test{{{className}}}.{{{getter}}}s().clear();
//		test{{{className}}}.{{{getter}}}s().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
		fail("Not yet implemented");
	}
	{{/objectPropertyValueCollection}}
	{{#stringCollection}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}s}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		assertTrue(UnitTestHelper.isListsEqual({{{propertyNameUpper}}}_TEST_LIST1, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
		test{{{className}}}.{{{getter}}}s().clear();
		test{{{className}}}.{{{getter}}}s().addAll({{{propertyNameUpper}}}_TEST_LIST2);
		assertTrue(UnitTestHelper.isListsEqual({{{propertyNameUpper}}}_TEST_LIST2, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
	}
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}s}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
//		assertTrue(UnitTestHelper.isListsEquivalent(TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
//		test{{{className}}}.{{{getter}}}s().clear();
//		test{{{className}}}.{{{getter}}}s().addAll(NEW_TEST_VALUE);
//		assertTrue(UnitTestHelper.isListsEquivalent(NEW_TEST_VALUE, new ArrayList<>(test{{{className}}}.{{{getter}}}())));
		fail("Not yet implemented");
	}
	{{/objectPropertyValueSet}}
	{{#enumPropertyValueCollection}}
	
	/**
	 * Test method for {@link {{{pkgName}}}.{{{className}}}#{{{getter}}}}.
	 */
	public void test{{{className}}}{{{getter}}}s() throws InvalidSPDXAnalysisException {
		{{{className}}} test{{{className}}} = builderFor{{{className}}}Tests(modelStore, TEST_OBJECT_URI, copyManager).build();
		assertTrue(UnitTestHelper.isListsEqual({{{propertyNameUpper}}}_TEST_LIST1, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
		test{{{className}}}.{{{getter}}}s().clear();
		test{{{className}}}.{{{getter}}}s().addAll({{{propertyNameUpper}}}_TEST_LIST2);
		assertTrue(UnitTestHelper.isListsEqual({{{propertyNameUpper}}}_TEST_LIST2, new ArrayList<>(test{{{className}}}.{{{getter}}}s())));
	}
	{{/enumPropertyValueCollection}}
	{{#elementProperties}}
	{{/elementProperties}}
	{{#objectProperties}}
	{{/objectProperties}}
	{{#anyLicenseInfoProperties}}
	{{/anyLicenseInfoProperties}}
	{{#enumerationProperties}}
	{{/enumerationProperties}}
	{{#booleanProperties}}
	{{/booleanProperties}}
	{{#integerProperties}}
	{{/integerProperties}}
	{{#stringProperties}}
	{{/stringProperties}}
	{{#objectPropertyValueCollection}}
	{{/objectPropertyValueCollection}}
	{{#stringCollection}}
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	{{/objectPropertyValueSet}}
	{{#enumPropertyValueCollection}}
	{{/enumPropertyValueCollection}}
}