/**
 * SPDX-FileCopyrightText: Copyright (c) {{{year}}} Source Auditor Inc.
 * SPDX-FileType: SOURCE
 * SPDX-License-Identifier: Apache-2.0
 */
package {{{pkgName}}};

import org.spdx.storage.NullModelStore;
import org.spdx.core.IndividualUriValue;
{{#imports}}
{{.}}
{{/imports}}

/**
 * This is an external representation of {{{className}}} - nothing can be set and properties returned
 * are not valid
 *
 */
public class External{{{className}}} extends {{{className}}}  implements IndividualUriValue {

	{{#objectPropertyValueCollection}}
	Collection<{{{type}}}> {{{propertyName}}}s = Collections.emptyList();
	{{/objectPropertyValueCollection}}
	{{#stringCollection}}
	Collection<String> {{{propertyName}}}s = Collections.emptyList();
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	Set<{{{type}}}> {{{propertyName}}}s = Collections.emptySet();
	{{/objectPropertyValueSet}}
	{{#enumPropertyValueCollection}}
	Collection<{{{type}}}> {{{propertyName}}}s = Collections.emptyList();
	{{/enumPropertyValueCollection}}

	/**
	 * @param objectUri URI or anonymous ID for the {{{className}}}
	 * @throws InvalidSPDXAnalysisException when unable to create the {{{className}}}
	 */
	public External{{{className}}}(String objectUri) throws InvalidSPDXAnalysisException {
		this(new NullModelStore(), objectUri, null, true, "");
	}

	/**
	 * @param modelStore Generally ignored for external
	 * @param objectUri URI for the external element
	 * @param copyManager Generally ignored for external
	 * @param create Generally ignored for external
	 * @param idPrefix Generally ignored for external
	 * @throws InvalidSPDXAnalysisException when unable to create the External{{{className}}}
	 */
	public External{{{className}}}(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager,
			boolean create, String idPrefix) throws InvalidSPDXAnalysisException {
			super(modelStore, objectUri, copyManager, create, idPrefix);
	}

	/**
	 * Create the {{{className}}} from the builder - used in the builder class
	 * @param builder Builder to create the {{{className}}} from
	 * @throws InvalidSPDXAnalysisException when unable to create the {{{className}}}
	 */
	 {{#suppressUnchecked}}
	 @SuppressWarnings("unchecked")
	 {{/suppressUnchecked}}
	protected External{{{className}}}({{{className}}}Builder builder) throws InvalidSPDXAnalysisException {
		super(builder);
	}
	
	@Override
	public boolean isExternal() {
		return true;
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.IndividualUriValue#getIndividualURI()
	 */
	@Override
	public String getIndividualURI() {
		return getObjectUri();
	}

	/* (non-Javadoc)
	 * @see org.spdx.library.core.CoreModelObject#getType()
	 */
	@Override
	public String getType() {
		return "{{{classProfile}}}.External{{{className}}}";
	}
	
	// Getters and Setters
	{{#objectPropertyValueCollection}}
	public Collection<{{{type}}}> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/objectPropertyValueCollection}}
	{{#enumPropertyValueCollection}}
	public Collection<{{{type}}}> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/enumPropertyValueCollection}}
	{{#stringCollection}}
	public Collection<String> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	public Set<{{{type}}}> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/objectPropertyValueSet}}
	{{#elementProperties}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable Element {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public Optional<Element> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable Element {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/elementProperties}}
	
	{{#objectProperties}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}	
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	 @SuppressWarnings("unchecked")
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/objectProperties}}
	{{#anyLicenseInfoProperties}}
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}
		
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/anyLicenseInfoProperties}}
	{{#licenseAdditionProperties}}
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}
		
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/licenseAdditionProperties}}
	{{#extendableLicenseProperties}}
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}
		
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/extendableLicenseProperties}}
	{{#enumerationProperties}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	 @SuppressWarnings("unchecked")
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/enumerationProperties}}
	{{#booleanProperties}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable Boolean {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}	
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/booleanProperties}}
	{{#integerProperties}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable Integer {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/integerProperties}}
	{{#doubleProperties}}
    {{#nonOptional}}
    /**
     * @return the {{{propertyName}}}
     */
    public @Nullable Double {{{getter}}}() throws InvalidSPDXAnalysisException {
        return null;
    }
    {{/nonOptional}}
    {{^nonOptional}}
    /**
     * @return the {{{propertyName}}}
     */
    public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
        return Optional.empty();
    }
    {{/nonOptional}}

    /**
     * @param {{{propertyName}}} the {{{propertyName}}} to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException
     */
    public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
        throw new InvalidSPDXAnalysisException("External elements can not set properties");
    }
    {{/doubleProperties}}
	{{#stringProperties}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable String {{{getter}}}() throws InvalidSPDXAnalysisException {
		return null;
	}
	{{/nonOptional}}	
	{{^nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public Optional<String> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return Optional.empty();
	}
	{{/nonOptional}}
	/**
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable String {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		throw new InvalidSPDXAnalysisException("External elements can not set properties");
	}
	{{/stringProperties}}
	
	
	@Override
	public String toString() {
		{{^toString}}
		return "{{{className}}}: "+getObjectUri();
		{{/toString}}
		{{{toString}}}
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.v3.ModelObjectV3#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<IndividualUriValue> profiles) {
		return new ArrayList<>();
	}
}
